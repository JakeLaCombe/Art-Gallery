{"version":3,"sources":["webpack:///./src/js/shaders/custom.frag","webpack:///./src/js/shaders/custom.vert","webpack:///./src/js/views/AbstractApplication.js","webpack:///./src/app.js","webpack:///./src/js/main.js"],"names":["module","exports","boundaries","views_AbstractApplication","AbstractApplication","classCallCheck_default","this","_clock","three_module","_camera","window","innerWidth","innerHeight","position","x","y","z","_scene","lookAt","_renderer","setPixelRatio","devicePixelRatio","setSize","document","body","appendChild","domElement","_controls","lookSpeed","movementSpeed","noFly","lookVertical","addEventListener","onWindowResize","bind","aspect","updateProjectionMatrix","timestamp","requestAnimationFrame","animate","delta","getDelta","update","render","Main","_this","possibleConstructorReturn_default","__proto__","get_prototype_of_default","call","planeGeometry","animatedTextures","texture","load","wrapS","wrapT","repeat","set","planeMaterial","map","side","plane","rotation","Math","PI","add","buildGalleryWalls","buildDisplayArea","loadArtWork","loadAnimatedArtwork","frameCount","horizTiles","vertTiles","tileCount","color","i","roofPlaneGeometry","roofMaterial","roofPlane","source","_this2","artwork","Image","ratiow","ratioh","src","loadTexture","minFilter","img","onload","width","height","overdraw","needsUpdate","data","_this3","annie","tilesHoriz","tilesVert","numTiles","tileDispDuration","tilesHorizontal","tilesVertical","numberOfTiles","tileDisplayDuration","currentDisplayTime","currentTile","milliSec","currentColumn","offset","currentRow","floor","push","get_default","prototype","length"],"mappings":"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","file":"static/js/app.783009f320dcfe921751.js","sourcesContent":["module.exports = \"#define GLSLIFY 1\\n//\\n// Description : Array and textureless GLSL 2D simplex noise function.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_1_0(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec2 mod289_1_0(vec2 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec3 permute_1_1(vec3 x) {\\n  return mod289_1_0(((x*34.0)+1.0)*x);\\n}\\n\\nfloat snoise_1_2(vec2 v)\\n  {\\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\\n                      0.024390243902439); // 1.0 / 41.0\\n// First corner\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n\\n// Other corners\\n  vec2 i1;\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n  //i1.y = 1.0 - i1.x;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n\\n// Permutations\\n  i = mod289_1_0(i); // Avoid truncation effects in permutation\\n  vec3 p = permute_1_1( permute_1_1( i.y + vec3(0.0, i1.y, 1.0 ))\\n    + i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n\\n// Normalise gradients implicitly by scaling m\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n// Compute final noise value at P\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\\n\\n\\n\\nvoid main() {\\n\\n  float brightness = snoise_1_2(gl_FragCoord.xx);\\n\\n    gl_FragColor = vec4(vec3(brightness), 1.0);\\n    //gl_FragColor = vec4(vec3(1.,1.,0.), 1.0);\\n\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/custom.frag\n// module id = 8reM\n// module chunks = 1","module.exports = \"#define GLSLIFY 1\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/custom.vert\n// module id = TAWV\n// module chunks = 1","import * as THREE from 'three'\nimport 'three/examples/js/controls/FirstPersonControls'\n\nconst boundaries = {\n  left: -70,\n  right: 70,\n  up: 70,\n  down: -70,\n};\n\nclass AbstractApplication {\n  constructor () {\n    this._clock = new THREE.Clock();\n\n    this._camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 1000)\n    this._camera.position.x = -50;\n    this._camera.position.y = 10;\n    this._camera.position.z = 50;\n\n    this._scene = new THREE.Scene()\n    this._camera.lookAt({x: 0, y: 5, z: 0});\n\n    this._renderer = new THREE.WebGLRenderer()\n    this._renderer.setPixelRatio(window.devicePixelRatio)\n    this._renderer.setSize(window.innerWidth, window.innerHeight)\n    document.body.appendChild(this._renderer.domElement)\n\n    this._controls = new THREE.FirstPersonControls(this._camera, this._renderer.domElement)\n    this._controls.lookSpeed = 0.2;\n    this._controls.movementSpeed = 20;\n    this._controls.noFly = true;\n    this._controls.lookVertical = false;\n\n    window.addEventListener('resize', this.onWindowResize.bind(this), false)\n  }\n\n  get renderer () {\n    return this._renderer\n  }\n\n  get camera () {\n    return this._camera\n  }\n\n  get scene () {\n    return this._scene\n  }\n\n  onWindowResize () {\n    this._camera.aspect = window.innerWidth / window.innerHeight\n    this._camera.updateProjectionMatrix()\n\n    this._renderer.setSize(window.innerWidth, window.innerHeight)\n  }\n\n  animate (timestamp) {\n    requestAnimationFrame(this.animate.bind(this))\n    let delta = this._clock.getDelta();\n    this._controls.update(delta);\n\n    if (this._camera.position.x < boundaries.left) {\n      this._camera.position.x = boundaries.left;\n    }\n\n    if (this._camera.position.x > boundaries.right) {\n      this._camera.position.x = boundaries.right;\n    }\n\n    if (this._camera.position.z < boundaries.down) {\n      this._camera.position.z = boundaries.down;\n    }\n\n    if (this._camera.position.z > boundaries.up) {\n      this._camera.position.z = boundaries.up;\n    }\n\n    this._renderer.render(this._scene, this._camera)\n  }\n}\n\nexport default AbstractApplication\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/views/AbstractApplication.js","import './css/style.css'\nimport Main from './js/main'\n// import Main from './js/mainWagner'\n// import Main from './js/mainVR'\n\n// eslint-disable-next-line\nnew Main()\n\n\n\n// WEBPACK FOOTER //\n// ./src/app.js","import * as THREE from 'three'\nimport AbstractApplication from 'views/AbstractApplication'\nimport shaderVert from 'shaders/custom.vert'\nimport shaderFrag from 'shaders/custom.frag'\n\nfunction TextureAnimator(texture, tilesHoriz, tilesVert, numTiles, tileDispDuration)\n{\n\t// note: texture passed by reference, will be updated by the update function.\n\n\tthis.tilesHorizontal = tilesHoriz;\n\tthis.tilesVertical = tilesVert;\n\t// how many images does this spritesheet contain?\n\t//  usually equals tilesHoriz * tilesVert, but not necessarily,\n\t//  if there at blank tiles at the bottom of the spritesheet.\n\tthis.numberOfTiles = numTiles;\n\ttexture.wrapS = THREE.RepeatWrapping;\n\ttexture.repeat.set( 1 / this.tilesHorizontal, 1 / this.tilesVertical );\n\n\t// how long should each image be displayed?\n\tthis.tileDisplayDuration = tileDispDuration;\n\n\t// how long has the current image been displayed?\n\tthis.currentDisplayTime = 0;\n\n\t// which image is currently being displayed?\n\tthis.currentTile = 0;\n\n\tthis.update = function( milliSec )\n\t{\n\t\tthis.currentDisplayTime += milliSec;\n\t\twhile (this.currentDisplayTime > this.tileDisplayDuration)\n\t\t{\n\t\t\tthis.currentDisplayTime -= this.tileDisplayDuration;\n\t\t\tthis.currentTile++;\n\t\t\tif (this.currentTile == this.numberOfTiles)\n\t\t\t\tthis.currentTile = 0;\n\t\t\tvar currentColumn = this.currentTile % this.tilesHorizontal;\n\t\t\ttexture.offset.x = currentColumn / this.tilesHorizontal;\n\t\t\tvar currentRow = Math.floor( this.currentTile / this.tilesHorizontal );\n\t\t\ttexture.offset.y = currentRow / this.tilesVertical;\n\t\t}\n  }\n};\n\nclass Main extends AbstractApplication {\n  constructor () {\n    super()\n\n    var planeGeometry = new THREE.PlaneGeometry(150, 150, 1, 1);\n    this.animatedTextures = [];\n\n    const texture = new THREE.TextureLoader().load('static/textures/wood5.png');\n    texture.wrapS = THREE.RepeatWrapping;\n    texture.wrapT = THREE.RepeatWrapping;\n    texture.repeat.set( 8, 8 );\n    const planeMaterial = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });\n    var plane = new THREE.Mesh(planeGeometry, planeMaterial);\n\n    plane.rotation.x = -0.5 * Math.PI;\n    this._scene.add(plane);\n\n    this.buildGalleryWalls();\n    this.buildDisplayArea({x: -20, y: -20});\n    this.buildDisplayArea({x: 15, y: 15});\n    this.buildDisplayArea({x: 50, y: 50});\n    this.loadArtWork('static/artwork/chucky.png', {x: -20, z: -4.9, rotation: 0});\n    this.loadAnimatedArtwork(\n      'static/artwork/animated_hair.png',\n      {x: -20, z: -70, rotation: 0},\n      {frameCount: 16, horizTiles: 16, vertTiles: 1, tileCount: 16},\n    );\n    this.loadAnimatedArtwork(\n      'static/artwork/ice_cream.png',\n      {x: -35.125, z: -20.4, rotation: Math.PI / 2},\n      {frameCount: 9, horizTiles: 9, vertTiles: 1, tileCount: 9},\n    );\n\n    this.animate();\n  }\n\n  setupPlanes() {\n    var planeGeometry = new THREE.PlaneGeometry(30, 20, 0, 0);\n    var planeMaterial = new THREE.MeshBasicMaterial({color: 0xcccccc, side: THREE.DoubleSide});\n    var plane = new THREE.Mesh(planeGeometry, planeMaterial);\n\n    plane.rotation.x = 0;\n    plane.position.x = 15;\n    plane.position.y = 10;\n    plane.position.z = 0;\n\n    this._scene.add(plane);\n  }\n\n  buildGalleryWalls() {\n    for(let i = 0; i < 4; i++) {\n      var planeGeometry = new THREE.PlaneGeometry(150, 20, 0, 0);\n      var planeMaterial = new THREE.MeshBasicMaterial({color: 0xf2f2f2, side: THREE.DoubleSide});\n      var plane = new THREE.Mesh(planeGeometry, planeMaterial);\n\n      plane.rotation.y = i / 2 * Math.PI;\n\n      plane.position.y = 10;\n\n      switch(i)\n      {\n        case 0:\n          plane.position.x = 0;\n          plane.position.z = 75;\n          break;\n        case 1:\n          plane.position.x = -75;\n          plane.position.z = 0;\n          break;\n        case 2:\n          plane.position.x = 0;\n          plane.position.z = -75;\n          break;\n        case 3:\n          plane.position.x = 75;\n          plane.position.z = 0;\n          break;\n      }\n\n      this._scene.add(plane);\n    }\n  }\n\n  buildDisplayArea(position) {\n    for(let i = 0; i < 4; i++) {\n      var planeGeometry = new THREE.PlaneGeometry(30, 20, 0, 0);\n      var planeMaterial = new THREE.MeshBasicMaterial({color: 0xf2f2f2, side: THREE.DoubleSide});\n      var plane = new THREE.Mesh(planeGeometry, planeMaterial);\n\n      plane.rotation.y = i / 2 * Math.PI;\n\n      plane.position.y = 10;\n\n      switch(i)\n      {\n        case 0:\n          plane.position.x = position.x;\n          plane.position.z = position.y + 15;\n          break;\n        case 1:\n          plane.position.x = position.x + 15;\n          plane.position.z = position.y;\n          break;\n        case 2:\n          plane.position.x = position.x;\n          plane.position.z = position.y - 15;\n          break;\n        case 3:\n          plane.position.x = position.x - 15;\n          plane.position.z = position.y;\n          break;\n      }\n\n      this._scene.add(plane);\n    }\n\n    let roofPlaneGeometry = new THREE.PlaneGeometry(30, 30, 0, 0);\n    var roofMaterial = new THREE.MeshBasicMaterial({color: 0xcccccc, side: THREE.DoubleSide});\n    var roofPlane = new THREE.Mesh(roofPlaneGeometry, roofMaterial);\n\n    roofPlane.position.y = 10;\n    roofPlane.position.x = position.x;\n    roofPlane.position.z = position.y;\n    roofPlane.rotation.x = Math.PI * 0.5;\n    this._scene.add(roofPlane);\n\n  }\n\n  loadArtWork(source, position) {\n    var artwork = new Image();\n\t\tvar ratiow = 0;\n\t\tvar ratioh = 0;\n\n\t\tvar source = source;\n\t\tartwork.src = source;\n\n    var texture = THREE.ImageUtils.loadTexture(artwork.src);\n    texture.minFilter = THREE.LinearFilter;\n\t\tvar img = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });\n\n    artwork.onload = () => {\n\t\t\tratiow = artwork.width/15;\n\t\t\tratioh = artwork.height/15;\n\t\t\t// plane for artwork\n\t\t\tlet plane = new THREE.Mesh(new THREE.PlaneGeometry(ratiow, ratioh),img); //width, height\n\t\t\tplane.overdraw = true;\n                  //-1 because index is 0 - n-1 but num of paintings is n\n      plane.rotation.y = position.rotation;\n\t\t  plane.position.x = position.x;\n      plane.position.y = 10;\n      plane.position.z = position.z;\n\n\t\t\tthis._scene.add(plane);\n\t\t}\n\n\t\timg.map.needsUpdate = true; //ADDED\n  }\n\n  loadAnimatedArtwork(source, position, data) {\n    var artwork = new Image();\n\t\tvar ratiow = 0;\n\t\tvar ratioh = 0;\n\n\t\tvar source = source;\n\t\tartwork.src = source;\n\n    var texture = THREE.ImageUtils.loadTexture(artwork.src);\n    var annie = new TextureAnimator( texture, data.horizTiles, data.vertTiles, data.tileCount, 2);\n    texture.minFilter = THREE.LinearFilter;\n\t\tvar img = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });\n\n    artwork.onload = () => {\n\t\t\tratiow = Math.floor(artwork.width / 15 / data.frameCount);\n\t\t\tratioh = Math.floor(artwork.height / 15);\n\t\t\t// plane for artwork\n\t\t\tlet plane = new THREE.Mesh(new THREE.PlaneGeometry(ratiow, ratioh),img); //width, height\n                  //-1 because index is 0 - n-1 but num of paintings is n\n      plane.rotation.y = position.rotation;\n\n\t\t  plane.position.x = position.x;\n      plane.position.y = 10;\n      plane.position.z = position.z;\n\n\t\t\tthis._scene.add(plane);\n      this.animatedTextures.push(annie);\n\t\t}\n\n\t\timg.map.needsUpdate = true; //ADDED\n  }\n\n  animate(timestamp) {\n    super.animate(timestamp);\n    let delta = this._clock.getDelta();\n\n    for (let i = 0; i < this.animatedTextures.length; i++) {\n      this.animatedTextures[i].update(1000 * delta);\n    }\n  }\n}\n\nexport default Main;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/main.js"],"sourceRoot":""}