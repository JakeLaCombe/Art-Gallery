{"version":3,"sources":["webpack:///./src/js/shaders/custom.frag","webpack:///./src/js/shaders/custom.vert","webpack:///./src/js/views/AbstractApplication.js","webpack:///./src/app.js","webpack:///./src/js/main.js"],"names":["module","exports","boundaries","views_AbstractApplication","AbstractApplication","classCallCheck_default","this","_clock","three_module","_camera","window","innerWidth","innerHeight","position","x","y","z","_scene","lookAt","_renderer","setPixelRatio","devicePixelRatio","setSize","document","body","appendChild","domElement","_controls","lookSpeed","movementSpeed","noFly","lookVertical","addEventListener","onWindowResize","bind","aspect","updateProjectionMatrix","timestamp","requestAnimationFrame","animate","delta","getDelta","update","render","Main","_this","possibleConstructorReturn_default","__proto__","get_prototype_of_default","call","planeGeometry","texture","load","wrapS","wrapT","repeat","set","planeMaterial","map","side","plane","rotation","Math","PI","add","buildGalleryWalls","buildDisplayArea","loadArtWork","color","i","roofPlaneGeometry","roofMaterial","roofPlane","source","_this2","artwork","Image","ratiow","ratioh","src","loadTexture","minFilter","img","onload","width","height","overdraw","needsUpdate"],"mappings":"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","file":"static/js/app.d0056d852abb9d7b8fd4.js","sourcesContent":["module.exports = \"#define GLSLIFY 1\\n//\\n// Description : Array and textureless GLSL 2D simplex noise function.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_1_0(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec2 mod289_1_0(vec2 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec3 permute_1_1(vec3 x) {\\n  return mod289_1_0(((x*34.0)+1.0)*x);\\n}\\n\\nfloat snoise_1_2(vec2 v)\\n  {\\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\\n                      0.024390243902439); // 1.0 / 41.0\\n// First corner\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n\\n// Other corners\\n  vec2 i1;\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n  //i1.y = 1.0 - i1.x;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n\\n// Permutations\\n  i = mod289_1_0(i); // Avoid truncation effects in permutation\\n  vec3 p = permute_1_1( permute_1_1( i.y + vec3(0.0, i1.y, 1.0 ))\\n    + i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n\\n// Normalise gradients implicitly by scaling m\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n// Compute final noise value at P\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\\n\\n\\n\\nvoid main() {\\n\\n  float brightness = snoise_1_2(gl_FragCoord.xx);\\n\\n    gl_FragColor = vec4(vec3(brightness), 1.0);\\n    //gl_FragColor = vec4(vec3(1.,1.,0.), 1.0);\\n\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/custom.frag\n// module id = 8reM\n// module chunks = 1","module.exports = \"#define GLSLIFY 1\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/custom.vert\n// module id = TAWV\n// module chunks = 1","import * as THREE from 'three'\nimport 'three/examples/js/controls/FirstPersonControls'\n\nconst boundaries = {\n  left: -70,\n  right: 70,\n  up: 70,\n  down: -70,\n};\n\nclass AbstractApplication {\n  constructor () {\n    this._clock = new THREE.Clock();\n\n    this._camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 1000)\n    this._camera.position.x = -50;\n    this._camera.position.y = 10;\n    this._camera.position.z = 50;\n\n    this._scene = new THREE.Scene()\n    this._camera.lookAt({x: 0, y: 5, z: 0});\n\n    this._renderer = new THREE.WebGLRenderer()\n    this._renderer.setPixelRatio(window.devicePixelRatio)\n    this._renderer.setSize(window.innerWidth, window.innerHeight)\n    document.body.appendChild(this._renderer.domElement)\n\n    this._controls = new THREE.FirstPersonControls(this._camera, this._renderer.domElement)\n    this._controls.lookSpeed = 0.2;\n    this._controls.movementSpeed = 20;\n    this._controls.noFly = true;\n    this._controls.lookVertical = false;\n\n    window.addEventListener('resize', this.onWindowResize.bind(this), false)\n  }\n\n  get renderer () {\n    return this._renderer\n  }\n\n  get camera () {\n    return this._camera\n  }\n\n  get scene () {\n    return this._scene\n  }\n\n  onWindowResize () {\n    this._camera.aspect = window.innerWidth / window.innerHeight\n    this._camera.updateProjectionMatrix()\n\n    this._renderer.setSize(window.innerWidth, window.innerHeight)\n  }\n\n  animate (timestamp) {\n    requestAnimationFrame(this.animate.bind(this))\n    let delta = this._clock.getDelta();\n    this._controls.update(delta);\n\n    if (this._camera.position.x < boundaries.left) {\n      this._camera.position.x = boundaries.left;\n    }\n\n    if (this._camera.position.x > boundaries.right) {\n      this._camera.position.x = boundaries.right;\n    }\n\n    if (this._camera.position.z < boundaries.down) {\n      this._camera.position.z = boundaries.down;\n    }\n\n    if (this._camera.position.z > boundaries.up) {\n      this._camera.position.z = boundaries.up;\n    }\n\n    this._renderer.render(this._scene, this._camera)\n  }\n}\n\nexport default AbstractApplication\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/views/AbstractApplication.js","import './css/style.css'\nimport Main from './js/main'\n// import Main from './js/mainWagner'\n// import Main from './js/mainVR'\n\n// eslint-disable-next-line\nnew Main()\n\n\n\n// WEBPACK FOOTER //\n// ./src/app.js","import * as THREE from 'three'\nimport AbstractApplication from 'views/AbstractApplication'\nimport shaderVert from 'shaders/custom.vert'\nimport shaderFrag from 'shaders/custom.frag'\n\nclass Main extends AbstractApplication {\n  constructor () {\n    super()\n\n    var planeGeometry = new THREE.PlaneGeometry(150, 150, 1, 1);\n\n    const texture = new THREE.TextureLoader().load('static/textures/wood5.png');\n    texture.wrapS = THREE.RepeatWrapping;\n    texture.wrapT = THREE.RepeatWrapping;\n    texture.repeat.set( 8, 8 );\n    const planeMaterial = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });\n    var plane = new THREE.Mesh(planeGeometry, planeMaterial);\n\n    plane.rotation.x = -0.5 * Math.PI;\n    this._scene.add(plane);\n\n    this.buildGalleryWalls();\n    this.buildDisplayArea({x: -20, y: -20});\n    this.buildDisplayArea({x: 15, y: 15});\n    this.buildDisplayArea({x: 50, y: 50});\n    this.loadArtWork('static/artwork/chucky.png', {x: -20, z: -4.9});\n    this.loadArtWork('static/artwork/final_hair_animation.gif', {x: -20, z: -70});\n\n    this.animate()\n  }\n\n  setupPlanes() {\n    var planeGeometry = new THREE.PlaneGeometry(30, 20, 0, 0);\n    var planeMaterial = new THREE.MeshBasicMaterial({color: 0xcccccc, side: THREE.DoubleSide});\n    var plane = new THREE.Mesh(planeGeometry, planeMaterial);\n\n    plane.rotation.x = 0;\n    plane.position.x = 15;\n    plane.position.y = 10;\n    plane.position.z = 0;\n\n    this._scene.add(plane);\n  }\n\n  buildGalleryWalls() {\n    for(let i = 0; i < 4; i++) {\n      var planeGeometry = new THREE.PlaneGeometry(150, 20, 0, 0);\n      var planeMaterial = new THREE.MeshBasicMaterial({color: 0xf2f2f2, side: THREE.DoubleSide});\n      var plane = new THREE.Mesh(planeGeometry, planeMaterial);\n\n      plane.rotation.y = i / 2 * Math.PI;\n\n      plane.position.y = 10;\n\n      switch(i)\n      {\n        case 0:\n          plane.position.x = 0;\n          plane.position.z = 75;\n          break;\n        case 1:\n          plane.position.x = -75;\n          plane.position.z = 0;\n          break;\n        case 2:\n          plane.position.x = 0;\n          plane.position.z = -75;\n          break;\n        case 3:\n          plane.position.x = 75;\n          plane.position.z = 0;\n          break;\n      }\n\n      this._scene.add(plane);\n    }\n  }\n\n  buildDisplayArea(position) {\n    for(let i = 0; i < 4; i++) {\n      var planeGeometry = new THREE.PlaneGeometry(30, 20, 0, 0);\n      var planeMaterial = new THREE.MeshBasicMaterial({color: 0xf2f2f2, side: THREE.DoubleSide});\n      var plane = new THREE.Mesh(planeGeometry, planeMaterial);\n\n      plane.rotation.y = i / 2 * Math.PI;\n\n      plane.position.y = 10;\n\n      switch(i)\n      {\n        case 0:\n          plane.position.x = position.x;\n          plane.position.z = position.y + 15;\n          break;\n        case 1:\n          plane.position.x = position.x + 15;\n          plane.position.z = position.y;\n          break;\n        case 2:\n          plane.position.x = position.x;\n          plane.position.z = position.y - 15;\n          break;\n        case 3:\n          plane.position.x = position.x - 15;\n          plane.position.z = position.y;\n          break;\n      }\n\n      this._scene.add(plane);\n    }\n\n    let roofPlaneGeometry = new THREE.PlaneGeometry(30, 30, 0, 0);\n    var roofMaterial = new THREE.MeshBasicMaterial({color: 0xcccccc, side: THREE.DoubleSide});\n    var roofPlane = new THREE.Mesh(roofPlaneGeometry, roofMaterial);\n\n    roofPlane.position.y = 10;\n    roofPlane.position.x = position.x;\n    roofPlane.position.z = position.y;\n    roofPlane.rotation.x = Math.PI * 0.5;\n    this._scene.add(roofPlane);\n\n  }\n\n  loadArtWork(source, position) {\n    var artwork = new Image();\n\t\tvar ratiow = 0;\n\t\tvar ratioh = 0;\n\n\t\tvar source = source;\n\t\tartwork.src = source;\n\n    var texture = THREE.ImageUtils.loadTexture(artwork.src);\n    texture.minFilter = THREE.LinearFilter;\n\t\tvar img = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });\n\n    artwork.onload = () => {\n\t\t\tratiow = artwork.width/15;\n\t\t\tratioh = artwork.height/15;\n\t\t\t// plane for artwork\n\t\t\tlet plane = new THREE.Mesh(new THREE.PlaneGeometry(ratiow, ratioh),img); //width, height\n\t\t\tplane.overdraw = true;\n                  //-1 because index is 0 - n-1 but num of paintings is n\n\t\t  plane.position.x = position.x;\n      plane.position.y = 10;\n      plane.position.z = position.z;\n\n\t\t\tthis._scene.add(plane);\n\t\t}\n\n\t\timg.map.needsUpdate = true; //ADDED\n  }\n}\n\nexport default Main\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/main.js"],"sourceRoot":""}